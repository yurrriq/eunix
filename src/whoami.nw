% -*- ess-noweb-code-mode: c-mode; -*-
\documentclass{tufte-handout}


\input{preamble.tex}


% \usepackage[xindy,nopostdot]{glossaries}
% \makeglossaries
% \input{glossary}
% \renewcommand*{\glstextformat}[1]{\textsl{#1}}


\hypersetup{
  pdffitwindow=true,
  pdfstartview={FitH},
  pdftitle={eunix: whoami},
  pdfauthor={Eric Bailey <eric@ericb.me>},
  pdfsubject={A reimplementation of whoami for my own edification},
  pdfkeywords={UNIX, C language, learning},
  colorlinks=true,
  linkcolor=ErlangRed,
  urlcolor=ErlangRed
}


\title{eunix: whoami}


\date{%
  November 29, 2017
  \thanks{Last updated \today}
}


\begin{document}


\maketitle
@


\begin{marginfigure}
<<*>>=
<<Include headers.>>


<<Define constants.>>


<<Forward declarations.>>


<<Define the [[main]] function.>>


<<Define the [[usage]] function.>>
@
\end{marginfigure}


\begin{abstract}
  A reimplementation of \cee{whoami} for my own edification.
\end{abstract}


\tableofcontents


\section{The \cee{main} Function}

<<Define the [[main]] function.>>=
int main(int argc, char *argv[])
{
    <<Process given options.>>

    <<Print the user name associated with the current effective user ID.>>

    return 0;
}
@ %def argc
@ %def argv


\newpage
\section{Include Headers}

Include the core input and output functions from the C standard library.

<<Include headers.>>=
#include <stdio.h>
@ %def EOF
@ %def printf

From
\href{http://pubs.opengroup.org/onlinepubs/009695399/basedefs/sys/types.h.html}{\cee{sys/types.h}}
import [[uid_t]], a data type for user IDs.

<<Include headers.>>=
#include <sys/types.h>
@ %def uid_t

From
\href{http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/pwd.h.html}{\cee{pwd.h}}
import the struct, [[passwd]], which notably includes the member, \cee{pw_name},
and has a constructor function, [[getpwuid]].

<<Include headers.>>=
#include <pwd.h>
@ %def passwd
@ %def getpwuid
@ %def pw->pw_name

From
\href{http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/unistd.h.html}{\cee{unistd.h}}
import the function,
\href{http://pubs.opengroup.org/onlinepubs/9699919799/functions/geteuid.html}{[[geteuid]]},
which returns the effective user ID of the calling process.

<<Include headers.>>=
#include <unistd.h>
@ %def geteuid

Include the GNU [[getopt]] function from the GNU C Library.

\marginnote{%
  \say{%
    The [[getopt]] function gets the next option argument from the argument list
    specified by the [[argv]] and [[argc]] arguments. Normally these values come
    directly from the arguments received by [[main]].%
  } -- \citealp{gnu-getopt}
}

<<Include headers.>>=
#include <getopt.h>
@ %def getopt


\section{The \cee{usage} Function}

\begin{marginfigure}
<<Forward declarations.>>=
void usage();
@
\end{marginfigure}


Define the [[usage]] function, which displays information about how to use
\cee{whoami}.

<<Define the [[usage]] function.>>=
void usage()
{
    printf("Usage: whoami\n");
}
@


\section{Processing Options}

If any optiosn are given, complain about the first one (via [[getopt]]), print
the [[usage]] information, and return a nonzero status code.

<<Process given options.>>=
if (getopt(argc, argv, "") != EOF) {
    usage();
    return 1;
}
@


\section{Printing the Current User's Name}

Define a constant, [[NO_UID]], to represent the case when [[geteuid]] returns
\cee{-1}, which in \cee{whoami} will signify failureto find the user ID.

<<Define constants.>>=
uid_t NO_UID = -1;
@ %def NO_UID

Declare the variables [[uid]], to store the current user ID, and [[pw]], to
store further information about the current user.

<<Print the user name associated with the current effective user ID.>>=
uid_t uid;
struct passwd *pw;
@ %def uid


Get the effective user ID and store it as [[uid]].

<<Print the user name associated with the current effective user ID.>>=
uid = geteuid();

@

Check whether the effective user ID is [[NO_UID]], in which case we won't be
able to [[<<find a user with a matching [[uid]]>>]].

<<the user ID is [[NO_UID]]>>=
uid == NO_UID
@

Search the user database for an entry with a matching [[uid]]. If
\href{http://pubs.opengroup.org/onlinepubs/9699919799/functions/getpwuid.html}{[[getpwuid]]}
fails, it returns a null pointer.

<<find a user with a matching [[uid]]>>=
pw = getpwuid(uid)
@

If [[<<the user ID is [[NO_UID]]>>]] or we're unable to
[[<<find a user with a matching [[uid]]>>]], print a descriptive error message
and return a nonzero status code.

<<Print the user name associated with the current effective user ID.>>=
if (<<the user ID is [[NO_UID]]>> || !(<<find a user with a matching [[uid]]>>)) {
    printf("Cannot find name for user ID %lu\n",
           (unsigned long int) uid);
    return 1;
}
@

<<Print the user name associated with the current effective user ID.>>=
puts(pw->pw_name);
@


\newpage
\section{Full Listing}

\inputc{whoami.c}


\newpage
\section{Chunks}
\nowebchunks


\section{Index}
\nowebindex


\bibliography{eunix}
\bibliographystyle{plainnat}


% \newpage
% \listoftodos[To-Do]


\end{document}
